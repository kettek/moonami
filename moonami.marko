class {
  onCreate() {
    this.state = {
      cells: [],
      width: 8,
      height: 8,
      spinMode: false,
      colorMode: 'dark',
      peekabooMode: false,
    }
    this.setSize(this.state.width, this.state.height)
  }
  setSize(w,h) {
    // TODO: non-destructive resizing.
    this.state.cells.length = h
    for (let r = 0; r < h; r++) {
      this.state.cells[r] = []
      for (let c = 0; c < w; c++) {
        this.state.cells[r][c] = {
          lastMovementX: 0,
          phase: 0,
          string: String.fromCodePoint(0x1F311),
        }
      }
    }
  }
  onMount() {
    this.restoreFromCookie()
  }
  onDestroy() {
    this.saveToCookie()
  }
  restoreFromCookie() {
  }
  saveToCookie() {
  }
  updateURL() {
  }
  refreshCells() {
    for (let r = 0; r < this.state.cells.length; r++) {
      for (let c = 0; c < this.state.cells[r].length; c++) {
        this.adjustCellPhase(this.state.cells[r][c], this.state.cells[r][c].phase)
      }
    }
  }
  adjustCellPhase(cell, amount) {
    cell.phase = amount
    if (cell.phase >= 8) cell.phase = 0
    if (cell.phase < 0) cell.phase = 7
    let codePoint = 0x1F311 + cell.phase
    if (this.state.peekabooMode) {
      if (codePoint == 0x1F311 && this.state.colorMode == 'dark') {
        codePoint = 0x1F31A
      } else if (codePoint == 0x1F315 && this.state.colorMode == 'light') {
        codePoint = 0x1F31D
      }
    }
    cell.string = String.fromCodePoint(codePoint)
    this.forceUpdate()
  }
  onMouseOut(cell, e) {
    if (!this.state.spinMode) return
    let start = performance.now()
    let targetDelta = Math.abs(cell.lastMovementX)*10
    let timer = setInterval(() => {
      let current = performance.now()
      if (current - start > targetDelta) {
        clearInterval(timer)
      }
      if (cell.lastMovementX < 0) {
        this.adjustCellPhase(cell, cell.phase+1)
      } else {
        this.adjustCellPhase(cell, cell.phase-1)
      }
    }, 50)
  }
  onMouseMove(cell, e) {
    if (!this.state.spinMode) return
    cell.lastMovementX = e.movementX
    /*if (cell.lastMovementX < 0) {
      this.adjustCellPhase(cell, cell.phase-1)
    } else {
      this.adjustCellPhase(cell, cell.phase+1)
    }*/
  }
  onMouseDown(cell, e) {
    let mouseUp = (e2) => {
      if (e2.target == e.target) {
        switch(e.which) {
          case 1:
            this.adjustCellPhase(cell, cell.phase+1)
          break;
          case 2:
            this.adjustCellPhase(cell, (cell.phase+4)%8)
          break;
          case 3:
            this.adjustCellPhase(cell, cell.phase-1)
          break;
        }
      }
      window.removeEventListener('mouseup', mouseUp)
    }
    window.addEventListener('mouseup', mouseUp)
  }
  handleSettingChange(name, e) {
    switch(name) {
      case 'spinMode':
        this.state.spinMode = e.target.checked
      break;
      case 'colorMode':
        this.state.colorMode = e.target.checked ? 'dark' : 'light'
        this.refreshCells()
      break;
      case 'peekabooMode':
        this.state.peekabooMode = e.target.checked
        this.refreshCells()
      break;
    }
  }
  handleRandomize() {
    for (let r = 0; r < this.state.cells.length; r++) {
      for (let c = 0; c < this.state.cells[r].length; c++) {
        this.adjustCellPhase(this.state.cells[r][c], Math.floor(Math.random()*8))
      }
    }
  }
  handleNormalize() {
    for (let r = 0; r < this.state.cells.length; r++) {
      for (let c = 0; c < this.state.cells[r].length; c++) {
        this.adjustCellPhase(this.state.cells[r][c], 0)
      }
    }
  }
}

style {
  html {
    width: 100%;
    height: 100%;
    background: #2c2c4c;
  }
  body {
    width: 100%;
    height: 100%;
    margin: 0;
  }
  .moonAmi {
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-areas:
      "settings"
      "view";
    grid-template-rows: auto 1fr;
    grid-template-columns: 1fr;
  }
  .moonAmi-settings {
    grid-area: settings;
    color: white;
  }
  .moonAmi-view {
    grid-area: view;
    user-select: none;
    display: grid;
    grid-template-rows: repeat(auto-fit, 1em);
    font-size: 4em;
  }
  .moonAmi-view.-light {
    color: #000;
    background: #4B79A1;
    background: -webkit-linear-gradient(to top, #283E51, #0A2342);
    background: linear-gradient(to top, #283E51, #0A2342);
    background: -olinear-gradient(to top, #283E51, #0A2342);
  }
  .moonAmi-view.-dark {
    color: #fff;
    background: #4B79A1;
    background: -webkit-linear-gradient(to top, #283E51, #0A2342);
    background: linear-gradient(to top, #283E51, #0A2342);
    background: -olinear-gradient(to top, #283E51, #0A2342);
  }
  .moonAmi-view-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, 1em);
    grid-template-rows: 1em;
    justify-content: center;
  }
  .moonAmi-view-cell {
    display: flex;
    align-items: center;
    justify-content: center;
  }
}

div.moonAmi
  div.moonAmi-settings
    label
      span -- speen
      input type='checkbox' on-change('handleSettingChange', 'spinMode') checked=state.spinMode
    label
      span -- dark mode
      input type='checkbox' on-change('handleSettingChange', 'colorMode') checked=state.colorMode=='dark'
    label
      span -- peekaboo
      input type='checkbox' on-change('handleSettingChange', 'peekabooMode') checked=state.peekabooMode
    button on-click('handleRandomize') -- randomize
    button on-click('handleNormalize') -- normalize
  div.moonAmi-view class={'-dark': state.colorMode=='dark', '-light': state.colorMode=='light'}
    for|row| of=state.cells
      div.moonAmi-view-row
        for|cell| of=row
          div.moonAmi-view-cell on-mousemove('onMouseMove', cell) on-mouseout('onMouseOut', cell) on-mousedown('onMouseDown', cell) on-contextmenu(e=>e.preventDefault()) -- ${cell.string}
